// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/emergencias.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Asignacion_EnviarEmergencia_FullMethodName   = "/emergencias.Asignacion/EnviarEmergencia"
	Asignacion_NotificarExtincion_FullMethodName = "/emergencias.Asignacion/NotificarExtincion"
)

// AsignacionClient is the client API for Asignacion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsignacionClient interface {
	EnviarEmergencia(ctx context.Context, in *EmergenciaRequest, opts ...grpc.CallOption) (*EmergenciaResponse, error)
	NotificarExtincion(ctx context.Context, in *EmergenciaRequest, opts ...grpc.CallOption) (*EmergenciaResponse, error)
}

type asignacionClient struct {
	cc grpc.ClientConnInterface
}

func NewAsignacionClient(cc grpc.ClientConnInterface) AsignacionClient {
	return &asignacionClient{cc}
}

func (c *asignacionClient) EnviarEmergencia(ctx context.Context, in *EmergenciaRequest, opts ...grpc.CallOption) (*EmergenciaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmergenciaResponse)
	err := c.cc.Invoke(ctx, Asignacion_EnviarEmergencia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asignacionClient) NotificarExtincion(ctx context.Context, in *EmergenciaRequest, opts ...grpc.CallOption) (*EmergenciaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmergenciaResponse)
	err := c.cc.Invoke(ctx, Asignacion_NotificarExtincion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsignacionServer is the server API for Asignacion service.
// All implementations must embed UnimplementedAsignacionServer
// for forward compatibility.
type AsignacionServer interface {
	EnviarEmergencia(context.Context, *EmergenciaRequest) (*EmergenciaResponse, error)
	NotificarExtincion(context.Context, *EmergenciaRequest) (*EmergenciaResponse, error)
	mustEmbedUnimplementedAsignacionServer()
}

// UnimplementedAsignacionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAsignacionServer struct{}

func (UnimplementedAsignacionServer) EnviarEmergencia(context.Context, *EmergenciaRequest) (*EmergenciaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarEmergencia not implemented")
}
func (UnimplementedAsignacionServer) NotificarExtincion(context.Context, *EmergenciaRequest) (*EmergenciaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotificarExtincion not implemented")
}
func (UnimplementedAsignacionServer) mustEmbedUnimplementedAsignacionServer() {}
func (UnimplementedAsignacionServer) testEmbeddedByValue()                    {}

// UnsafeAsignacionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsignacionServer will
// result in compilation errors.
type UnsafeAsignacionServer interface {
	mustEmbedUnimplementedAsignacionServer()
}

func RegisterAsignacionServer(s grpc.ServiceRegistrar, srv AsignacionServer) {
	// If the following call pancis, it indicates UnimplementedAsignacionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Asignacion_ServiceDesc, srv)
}

func _Asignacion_EnviarEmergencia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergenciaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsignacionServer).EnviarEmergencia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asignacion_EnviarEmergencia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsignacionServer).EnviarEmergencia(ctx, req.(*EmergenciaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asignacion_NotificarExtincion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergenciaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsignacionServer).NotificarExtincion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asignacion_NotificarExtincion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsignacionServer).NotificarExtincion(ctx, req.(*EmergenciaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Asignacion_ServiceDesc is the grpc.ServiceDesc for Asignacion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Asignacion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencias.Asignacion",
	HandlerType: (*AsignacionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarEmergencia",
			Handler:    _Asignacion_EnviarEmergencia_Handler,
		},
		{
			MethodName: "NotificarExtincion",
			Handler:    _Asignacion_NotificarExtincion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emergencias.proto",
}

const (
	Drones_AsignarEmergencia_FullMethodName = "/emergencias.Drones/AsignarEmergencia"
)

// DronesClient is the client API for Drones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DronesClient interface {
	AsignarEmergencia(ctx context.Context, in *AsignacionDronRequest, opts ...grpc.CallOption) (*EmergenciaResponse, error)
}

type dronesClient struct {
	cc grpc.ClientConnInterface
}

func NewDronesClient(cc grpc.ClientConnInterface) DronesClient {
	return &dronesClient{cc}
}

func (c *dronesClient) AsignarEmergencia(ctx context.Context, in *AsignacionDronRequest, opts ...grpc.CallOption) (*EmergenciaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmergenciaResponse)
	err := c.cc.Invoke(ctx, Drones_AsignarEmergencia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DronesServer is the server API for Drones service.
// All implementations must embed UnimplementedDronesServer
// for forward compatibility.
type DronesServer interface {
	AsignarEmergencia(context.Context, *AsignacionDronRequest) (*EmergenciaResponse, error)
	mustEmbedUnimplementedDronesServer()
}

// UnimplementedDronesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDronesServer struct{}

func (UnimplementedDronesServer) AsignarEmergencia(context.Context, *AsignacionDronRequest) (*EmergenciaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsignarEmergencia not implemented")
}
func (UnimplementedDronesServer) mustEmbedUnimplementedDronesServer() {}
func (UnimplementedDronesServer) testEmbeddedByValue()                {}

// UnsafeDronesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DronesServer will
// result in compilation errors.
type UnsafeDronesServer interface {
	mustEmbedUnimplementedDronesServer()
}

func RegisterDronesServer(s grpc.ServiceRegistrar, srv DronesServer) {
	// If the following call pancis, it indicates UnimplementedDronesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Drones_ServiceDesc, srv)
}

func _Drones_AsignarEmergencia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsignacionDronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DronesServer).AsignarEmergencia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drones_AsignarEmergencia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DronesServer).AsignarEmergencia(ctx, req.(*AsignacionDronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drones_ServiceDesc is the grpc.ServiceDesc for Drones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencias.Drones",
	HandlerType: (*DronesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AsignarEmergencia",
			Handler:    _Drones_AsignarEmergencia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emergencias.proto",
}

const (
	Monitoreo_Actualizaciones_FullMethodName = "/emergencias.Monitoreo/Actualizaciones"
)

// MonitoreoClient is the client API for Monitoreo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoreoClient interface {
	Actualizaciones(ctx context.Context, in *EmergenciaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EstadoEmergencia], error)
}

type monitoreoClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoreoClient(cc grpc.ClientConnInterface) MonitoreoClient {
	return &monitoreoClient{cc}
}

func (c *monitoreoClient) Actualizaciones(ctx context.Context, in *EmergenciaRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EstadoEmergencia], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Monitoreo_ServiceDesc.Streams[0], Monitoreo_Actualizaciones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmergenciaRequest, EstadoEmergencia]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoreo_ActualizacionesClient = grpc.ServerStreamingClient[EstadoEmergencia]

// MonitoreoServer is the server API for Monitoreo service.
// All implementations must embed UnimplementedMonitoreoServer
// for forward compatibility.
type MonitoreoServer interface {
	Actualizaciones(*EmergenciaRequest, grpc.ServerStreamingServer[EstadoEmergencia]) error
	mustEmbedUnimplementedMonitoreoServer()
}

// UnimplementedMonitoreoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoreoServer struct{}

func (UnimplementedMonitoreoServer) Actualizaciones(*EmergenciaRequest, grpc.ServerStreamingServer[EstadoEmergencia]) error {
	return status.Errorf(codes.Unimplemented, "method Actualizaciones not implemented")
}
func (UnimplementedMonitoreoServer) mustEmbedUnimplementedMonitoreoServer() {}
func (UnimplementedMonitoreoServer) testEmbeddedByValue()                   {}

// UnsafeMonitoreoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoreoServer will
// result in compilation errors.
type UnsafeMonitoreoServer interface {
	mustEmbedUnimplementedMonitoreoServer()
}

func RegisterMonitoreoServer(s grpc.ServiceRegistrar, srv MonitoreoServer) {
	// If the following call pancis, it indicates UnimplementedMonitoreoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Monitoreo_ServiceDesc, srv)
}

func _Monitoreo_Actualizaciones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmergenciaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoreoServer).Actualizaciones(m, &grpc.GenericServerStream[EmergenciaRequest, EstadoEmergencia]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoreo_ActualizacionesServer = grpc.ServerStreamingServer[EstadoEmergencia]

// Monitoreo_ServiceDesc is the grpc.ServiceDesc for Monitoreo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monitoreo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencias.Monitoreo",
	HandlerType: (*MonitoreoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Actualizaciones",
			Handler:       _Monitoreo_Actualizaciones_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/emergencias.proto",
}
